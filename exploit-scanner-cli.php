<?php

if ( class_exists( "WP_CLI_Command" ) ) {
	/**
	 * WordPress Exploit Scanner
	 */
	class ExploitScannerCLI extends WP_CLI_Command {
		/**
		 * Start Exploit Scanner scan.
		 *
		 * ## OPTIONS
		 *
		 * [--show-suspicious-styles]
		 * : Search for suspicious styles - (display:none and visibility:hidden can be used to hide spam, but may cause many false positives)
		 *
		 * [--file-size=<size-in-kb>]
		 * : Upper file size limit in KB - (files larger than this are skipped and will be listed at the end of scan)
		 *
		 * [--files-per-block=<no-of-files>]
		 * : Number of files per batch - (to help reduce memory limit errors the scan processes a series of file batches)
		 *
		 * [--report_all_unknown_files]
		 * : Reports also unkown files outside of wp-includes, wp-admin and wp root directory
		 *
		 * [--export-csv=<file-name>]
		 * : It will export result to specified csv file
		 *
		 * ## EXAMPLES
		 *
		 *     wp exploit-scanner scan
		 *
		 * @synopsis
		 */
		function scan( $args, $assoc_args ) {
			$default    = array(
				'show-suspicious-styles' => true,
				'file-size'              => 400,
				'files-per-block'        => 250,
				'report_all_unknown_files' => false,
				'export-csv'             => false
			);
			$assoc_args = wp_parse_args( $assoc_args, $default );
			if ( !is_numeric( $assoc_args[ 'file-size' ] ) ) {
				WP_CLI::error( "--file-size : Upper file size limit should be numeric" );

				return;
			}
			if ( !is_numeric( $assoc_args[ 'files-per-block' ] ) ) {
				WP_CLI::error( "--files-per-block : Number of files per batch should be numeric" );

				return;
			}

			$fes_args = array(
				'start'           => 0,
				'fsl'             => intval( $assoc_args[ 'file-size' ] ),
				'max'             => intval( $assoc_args[ 'files-per-block' ] ),
				'report_all_unknown_files' => $assoc_args[ 'report_all_unknown_files' ],
				'display_pattern' => $assoc_args[ 'show-suspicious-styles' ]
			);

			WP_CLI::warning( "Star File Scanning..." );
			$scan_flag = true;
			$scanner   = new File_Exploit_Scanner( ABSPATH, $fes_args );
			// Fix for save transient error
			delete_transient( 'exploitscanner_results_trans' );
			delete_transient( 'exploitscanner_files' );
			$file_progress = new \cli\progress\Bar( 'Progress', 1000 );
			$file_progress->tick();
			while ( $scan_flag ) {
				$result = $scanner->run();
				if ( is_wp_error( $result ) ) {
					$file_progress->finish();
					WP_CLI::error( 'Files list not properly saved as a transient' );
					$scan_flag = false;
				} else if ( $result ) {
					$scan_flag = false;
					$file_progress->finish();
					WP_CLI::success( 'All files scanned' );
				} else {
					$file_progress->tick( $scanner->max_batch_size );
					$scanner->start = $scanner->start + $scanner->max_batch_size;
				}
			}

			WP_CLI::warning( "Star Database Scanning..." );
			$db_scanner = new DB_Exploit_Scanner();
			$db_scanner->run();
			WP_CLI::success( 'Database scanned' );
			$this->result( $args, $assoc_args );
		}

		/**
		 * Show last  Exploit Scanner scan result.
		 *
		 * [--export-csv=<file-name>]
		 * : It will export result to specified csv file
		 * ## EXAMPLES
		 *
		 *     wp exploit-scanner result
		 *
		 * @synopsis
		 */

		function result( $args, $assoc_args ) {
			$default    = array( 'export-csv' => false );
			$assoc_args = wp_parse_args( $assoc_args, $default );

			delete_transient( 'exploitscanner_results_trans' );
			delete_transient( 'exploitscanner_files' );

			$results = get_option( 'exploitscanner_results' );

			if ( $assoc_args[ 'export-csv' ] !== false ) {
				$export_csv     = array();
				$export_csv [ ] = array( 'Level', 'Location', 'Description', 'What was matched' );
				$colorize_start = '';
				$colorize_end   = '';
			} else {
				$colorize_start = '%R';
				$colorize_end   = '%n';
			}


			foreach ( array( 'severe', 'warning', 'note' ) as $l ) {
				if ( !empty( $results[ $l ] ) ) {
					//Level ' . ucwords($l) . ' (' . count($results[$l]) . ' matches)
					$lines = array();
					if ( false === $assoc_args[ 'export-csv' ] ) {
						WP_CLI::line( '' );
						WP_CLI::line( '' );
						WP_CLI::line( 'Level ' . ucwords( $l ) . ' (' . count( $results[ $l ] ) . ' matches)' );
					}
					if ( count( $results[ $l ] ) > 0 ) {
						//$#$#
						foreach ( $results[ $l ] as &$r ) {
							$r[ 'Level' ]    = ucwords( $l );
							$r[ 'Location' ] = '';
							if ( isset( $r[ 'loc' ] ) ) {
								$r[ 'Location' ] .= $r[ 'loc' ];
								if ( isset( $r[ 'line_no' ] ) ) {
									$r[ 'Location' ] .= ':' . $r[ 'line_no' ];
								}
							}
							$r[ 'Description' ] = '';
							if ( isset( $r[ 'desc' ] ) ) {
								$r[ 'Description' ] .= $r[ 'desc' ];
							}
							$r[ 'What was matched' ] = '';

							if ( isset( $r[ 'line' ] ) ) {
								$text = $r[ 'line' ];
								if ( strlen( $text ) > 200 ) {
									$start = strpos( $text, '$#$#' ) - 50;
									if ( $start < 0 ) {
										$start = 0;
									}
									$end  = strrpos( $text, '#$#$' ) + 50;
									$text = substr( $text, $start, $end - $start + 1 );
								}
								$start          = strpos( $text, '$#$#' );
								$temp_text      = substr( $text, $start + 4 );
								$end            = strrpos( $temp_text, '#$#$' );
								$highlight_text = substr( $temp_text, 0, $end );
								$replace_text   = '$#$#' . $highlight_text . '#$#$';
								if ( false === $assoc_args[ 'export-csv' ] ) {
									$r[ 'What was matched' ] = htmlspecialchars_decode( str_replace( $replace_text, \cli\Colors::colorize( $colorize_start . $highlight_text . $colorize_end ), $text ) );
								} else {
									$r[ 'What was matched' ] = htmlspecialchars_decode( str_replace( $replace_text, $colorize_start . $highlight_text . $colorize_end, $text ) );
								}
							}
							if ( false !== $assoc_args[ 'export-csv' ] ) {
								$export_csv [ ] = array(
									$r[ 'Level' ],
									$r[ 'Location' ],
									$r[ 'Description' ],
									$r[ 'What was matched' ]
								);
							}

						}
						if ( false === $assoc_args[ 'export-csv' ] ) {
							$fields = array( 'Location', 'Description', 'What was matched' );
							\WP_CLI\Utils\format_items( 'table', $results[ $l ], $fields );
						}
					}
				}
			}

			if ( false !== $assoc_args[ 'export-csv' ] ) {
				if ( file_exists( $assoc_args[ 'export-csv' ] ) ) {
					WP_CLI::warning( sprintf( "File already exists. The following file will be overwritten  %s", $assoc_args[ 'export-csv' ] ) );
				}

				$fp = fopen( $assoc_args[ 'export-csv' ], 'w+' );
				foreach ( $export_csv as $fields ) {
					fputcsv( $fp, $fields );
				}

				WP_CLI::success( sprintf( "File created: %s", $assoc_args[ 'export-csv' ] ) );
			}
		}
	}

	WP_CLI::add_command( 'exploit-scanner', 'ExploitScannerCLI' );
}
